package it.unige.dibris.batchrmperm.service;

import com.google.common.hash.Hashing;
import com.google.common.io.Files;
import it.unige.dibris.batchrmperm.domain.Apk;
import it.unige.dibris.batchrmperm.utility.Utility;
import net.dongliu.apk.parser.ApkParser;
import net.dongliu.apk.parser.bean.ApkMeta;
import net.dongliu.apk.parser.exception.ParserException;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Service
public class MalwarePermission {
    private static final Path APK_MALW_PATH = Paths.get("/media/simo/HDEsterno/AApks/malware/");
    private static final File ONLY_MUND = new File(APK_MALW_PATH.toString(), "MUND");


    @Async
    public void doTheWork() {
        try {
            List<Path> apks = Utility.listApkFiles(APK_MALW_PATH);
            System.out.println("apksN= " + apks.size() );
            int i=0;
            for (Path apkPath : apks) {
                File apkFile = new File(apkPath.toString());
                try {
                    ApkMeta apkMeta = new ApkParser(apkFile).getApkMeta();
                    Set<String> permSet = new HashSet<>(apkMeta.getUsesPermissions());
                    if (hasOnlyMUNDpermissions(permSet)) {
                        Apk apk = new Apk(apkPath);
                        java.nio.file.Files.move(apk.getPath(), Paths.get(ONLY_MUND.toString(), apk.getPath().getFileName().toString()));
                        System.out.println(i++ + "/" + apks.size() );
                        System.out.println(apk);
                    }
                }
                catch (ParserException|IllegalArgumentException pe) {
                    pe.printStackTrace();
                }

            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("END");
    }


    private boolean hasOnlyMUNDpermissions(Set<String> permissions) {
        if (permissions.size() == 0)
            return false;
        permissions.removeAll(Utility.getMostUsedNotDangerousPerms());
        return permissions.isEmpty();
    }
}
